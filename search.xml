<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LOL换肤工具</title>
      <link href="/2021/05/05/lian-meng-hao-yong-de-huan-fu-gong-ju-ni-dong-de/"/>
      <url>/2021/05/05/lian-meng-hao-yong-de-huan-fu-gong-ju-ni-dong-de/</url>
      
        <content type="html"><![CDATA[<h1 id="League-Skin"><a href="#League-Skin" class="headerlink" title="League Skin"></a>League Skin</h1><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p><img src="https://img.05sun.com/up/2002/202002110900584812.jpg" alt>  </p><ul><li>步骤1：下载Mod Skin LoL。</li><li>步骤2：打开您的Game League of Legends。</li><li>步骤3：打开“ LoL皮肤程序”。选择您的冠军，然后单击活动您喜欢的皮肤。  </li></ul><p>14/10自定义皮肤和地图皮肤修复….-<br>程序自动关闭或无法打开：尝试从C：\ Program Files（x86）\ Digital Communications \ SAntivirus检查或卸载恶意软件SAntivirus *发生错误（avast，mcfee …）每次更新新补丁时，都会使用我的软件。几天后，该防病毒软件将允许皮肤变质，因此，如果您无法打开或无法正常工作，请不要担心太多，请暂时关闭防病毒软件。如何关闭防病毒软件:<a href="https://www.youtube.com/watch?v=GpvSP5Fca8Q" target="_blank" rel="noopener">https://www.youtube.com/watch?v=GpvSP5Fca8Q</a><br>如果您遇到问题，可以与我们联系以寻求帮助：<a href="facebook.com/LOLProSkin">facebook.com/LOLProSkin</a>  </p><h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="http://leagueskin.net/p/download-mod-skin-2020-chn" target="_blank" rel="noopener">http://leagueskin.net/p/download-mod-skin-2020-chn</a>  </p><p>有一定几率封号，请谨慎使用。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO给博客添加看板娘(Live2D)</title>
      <link href="/2021/05/05/hexo-gei-bo-ke-tian-jia-kan-ban-niang-live2d/"/>
      <url>/2021/05/05/hexo-gei-bo-ke-tian-jia-kan-ban-niang-live2d/</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO给博客添加看板娘-Live2D"><a href="#HEXO给博客添加看板娘-Live2D" class="headerlink" title="HEXO给博客添加看板娘(Live2D)"></a>HEXO给博客添加看板娘(Live2D)</h1><p>最近在很多博客左下角或者右下角有看到小人(看板娘)，折腾了一番搜到的都没有达到预期的效果，并且大多数教程都是基于Next来做的，本人使用的主题是matery，跟Next有细微的区别。  </p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://img-blog.csdnimg.cn/20200526095857289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDUxNzMwMQ==,size_16,color_FFFFFF,t_70" alt></p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>1、把大神已修改好的代码托管在Github<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">源码</a>下载到hexo目录下的/themes/next/source下下载好的文件名live2d-widget  </p><p>2、进入live2d-widget 修改autoload.js  </p><pre><code>// 把这个替换掉const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;;// 替换为const live2d_path = &quot;/live2d-widget/&quot;;</code></pre><p>这个live2d_path是指刚才下载的源码存放的目录，在icarus中就会以hexo/theme/next/source 为根目录 ，刚才下载的源码放在这个位置所以这里的live2d_path 就是源码存放的位置</p><p>3、重点 不加会没有效果<br>在/themes/icarus/layout 中编辑 layout.ejs 加入以下依赖到<head><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"><link rel="stylesheet" href="/css/prism-line-numbers.css" type="text/css"></head>&gt;内 再次申明博主锁使用的是icarus 主题 如果是Next 主题则对应的文件是 /themes/next/layout/_layout.swig</p><pre><code> &lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt; &lt;script src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</code></pre><p>4、编辑主题的配置文件_config.yml</p><pre><code> live2d:  enable: true</code></pre><p>保存之后执行 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 查看效果</p><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改live2d-widget 下的 &gt; waifu-tips.js 、 waifu-tips.json 、 waifu.css</p><p>live2D模型地址：<br><a href="https://github.com/summerscar/live2dDemo" target="_blank" rel="noopener">https://github.com/summerscar/live2dDemo</a>  </p><p>live2D部分模型预览:<br><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的加速器</title>
      <link href="/2021/05/05/mian-fei-hao-yong-de-jia-su-qi/"/>
      <url>/2021/05/05/mian-fei-hao-yong-de-jia-su-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="佛跳墙VPN"><a href="#佛跳墙VPN" class="headerlink" title="佛跳墙VPN"></a>佛跳墙VPN</h1><p>推荐一款自己在用的免费加速器，解决上github很慢，还能上youtobe等网站。支持PC端和移动端。</p><h2 id="官网截图"><a href="#官网截图" class="headerlink" title="官网截图"></a>官网截图</h2><p><img src="%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%E5%8A%A0%E9%80%9F%E5%99%A8/110.png" alt></p><p>下载地址：<br><a href="https://www.fendouxiaqu.com/cn/" target="_blank" rel="noopener">https://www.fendouxiaqu.com/cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建绚丽的个人博客</title>
      <link href="/2021/05/04/kuai-su-da-jian-xuan-li-de-ge-ren-bo-ke/"/>
      <url>/2021/05/04/kuai-su-da-jian-xuan-li-de-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="NodeJS-Hexo-Matery主题-快速搭建博客"><a href="#NodeJS-Hexo-Matery主题-快速搭建博客" class="headerlink" title="NodeJS+Hexo(Matery主题)快速搭建博客"></a>NodeJS+Hexo(Matery主题)快速搭建博客</h1><h2 id="一、-环境搭建"><a href="#一、-环境搭建" class="headerlink" title="一、 环境搭建"></a>一、 环境搭建</h2><p>环境搭建的部分大部分引用<a href="https://tangg555.github.io/" target="_blank" rel="noopener">大佬的博客</a>进行修改。  </p><h2 id="1-1-安装NodeJS"><a href="#1-1-安装NodeJS" class="headerlink" title="1.1 安装NodeJS"></a>1.1 安装NodeJS</h2><p>Node 是一个让 JavaScript 运行在服务端的开发平台。NodeJS的安装很简单，一路next就可以，网上的教程也很多，这里举个例子：<br>需要注意的是nodeJS有两种版本，一个是长期支持版，还有一个是最新版，这里建议下载长期支持版，因为最新版可能不支持部分package导致程序出现莫名其妙的错误。比如在2020.5.20我使用的NodeJS v14.3.0不支持hexo-cli 3.9.0导致博客运行出错，后面换成LTS v12.16.3就好了。  </p><p><img src="https://tangg555.github.io/images/nodeJS1.png" alt><br>最后安装好之后，按Win+R打开命令提示符，输入node -v和npm -v，如果出现版本号，那么就安装成功了。</p><p>这里的npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题。在这份教程里npm只需要最低程度的了解就行，可以参考<a href="https://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">NPM使用介绍。</a><br>因为后续使用需要安装包，所以最好准备国内的镜像原以加速下载，这里我们使用nrm包。nrm使用教程可以参考：<a href="https://www.jianshu.com/p/171ec231ced4" target="_blank" rel="noopener">使用nrm快速切换npm源</a><br>先运行npm install -g nrm再运行nrm use taobao，这样我们的镜像原就换成淘宝的了。<br><img src="https://tangg555.github.io/images/nrm1.png" alt>  </p><h2 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2. 安装Git"></a>1.2. 安装Git</h2><p>为了把本地的文件上传到github上面去，我们需要用到分布式版本控制工具————Git<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载地址</a>。<br>安装选项全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开Git了。</p><p>安装完成后在命令提示符中输入git –version验证是否安装成功。  </p><h2 id="1-3-注册Github账号并创建Git-Pages仓库"><a href="#1-3-注册Github账号并创建Git-Pages仓库" class="headerlink" title="1.3. 注册Github账号并创建Git Pages仓库"></a>1.3. 注册Github账号并创建Git Pages仓库</h2><p>GitHub是通过Git进行版本控制的软件源代码托管服务平台，要成为一名合格的程序员（媛），Github是必备知识之一_(:з)∠)_。<br><a href="https://jingyan.baidu.com/article/4e5b3e192200e291911e2468.html" target="_blank" rel="noopener">Github注册可参考此处</a>。<br>注册完毕后我们打开<a href="https://github.com/" target="_blank" rel="noopener">https://github.com</a>,新建一个项目，如下所示：  </p><p><img src="%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BB%9A%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hub.png" alt>  </p><p>然后如下图所示，输入自己的项目名字，后面一定要加.github.io后缀，README初始化也要勾上。名称一定要和你的github名字完全一样，比如你github名字叫abc，那么仓库名字一定要是abc.github.io，这样你的博客的网址就会是<a href="https://abc.github.io。如果名字不一样的话其实也可以创建，但是创建出来的博客网址会附带https://github.com/xxx/的前缀，并且hexo部署后显示有可能不正常。" target="_blank" rel="noopener">https://abc.github.io。如果名字不一样的话其实也可以创建，但是创建出来的博客网址会附带https://github.com/xxx/的前缀，并且hexo部署后显示有可能不正常。</a>  </p><p><img src="%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BB%9A%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/01.png" alt>  </p><p>我已经创建过了这个仓库所以这里报了重名的错误。</p><p>项目建成后，点击Settings，向下拉到最后有个GitHub Pages，点击Choose a theme选择一个主题。然后等一会儿，再回到GitHub Pages，点击那个链接，就会出现自己的网页啦。</p><h2 id="1-4-安装Hexo"><a href="#1-4-安装Hexo" class="headerlink" title="1.4. 安装Hexo"></a>1.4. 安装Hexo</h2><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如可以放在D:\study\program\blog目录下。</p><p>在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入npm i hexo-cli -g安装Hexo。有可能有几个报错，无视它就行。</p><p>安装完后输入hexo -v验证是否安装成功。</p><p>然后就要初始化我们的网站，输入hexo init初始化文件夹，接着输入npm install安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，然后浏</p><p>览器打开<a href="http://localhost:4000/，就可以看到我们的博客啦。" target="_blank" rel="noopener">http://localhost:4000/，就可以看到我们的博客啦。</a>  </p><h2 id="1-5-连接Github与本地"><a href="#1-5-连接Github与本地" class="headerlink" title="1.5. 连接Github与本地"></a>1.5. 连接Github与本地</h2><p>这里以我的Github账号为例，首先右键打开git bash，然后输入下面命令：  </p><pre><code>git config --global user.name &quot;fu-99999&quot;git config --global user.email &quot;272651466@qq.com&quot;</code></pre><p>用户名和邮箱根据你注册github的信息自行修改。</p><p>然后生成密钥SSH key：</p><pre><code>ssh-keygen -t rsa -C &quot;272651466@qq.com&quot;</code></pre><p>打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。</p><p>git bash中输入</p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><p>将输出的内容复制到框中，点击确定保存。</p><p>输入<code>ssh -T git@github.com</code>，如果如下图所示，出现你的用户名，那就成功了</p><p><img src="https://tangg555.github.io/images/Github%E6%93%8D%E4%BD%9C4.png" alt></p><p>注意，创建ssh key期间如果要输入什么东西的话，直接回车就行，其中password phrase是密码，每次上传时都需要输入。</p><p>打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。</p><p>修改<code>deploy</code>的配置：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repository:    github: git@github.com:fu-99999/fu-99999.github.io.git  branch: master</code></pre><p>到这里为止，所有必须的环境就全部搭建完了。</p><h3 id="二、Hexo源代码介绍"><a href="#二、Hexo源代码介绍" class="headerlink" title="二、Hexo源代码介绍"></a>二、Hexo源代码介绍</h3><p>这里以我的博客代码为例<a href="https://fu-99999.github.io">https://fu-99999.github.io</a></p><h4 id="2-1-根目录"><a href="#2-1-根目录" class="headerlink" title="2.1.根目录"></a>2.1.根目录</h4><p>下图为根目录文件结构:</p><p><img src="%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BB%9A%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/02.png" alt></p><ul><li><code>.deploy_git</code>为运行<code>hexo d</code>命令后生成的文件目录；</li><li><code>node_modules</code>是npm安装包的存放目录；</li><li><code>public</code>是运行<code>hexo g</code>命令生成的静态文件，包含css, js, html等用于渲染的文件以及markdown格式的post等数据文件。<strong>注意!</strong>,这个文件夹里的东西是自动生成的，是用来给Git Pages部署的，因此不用人为修改里面的东西。（比如增加图片之类的，因为一运行hexo g命令就会自动重载）</li><li><code>scaffolds</code>存放<code>draft.md</code>, <code>page.md</code>, <code>post.md</code>三个样式文件，点进去看一下就知道怎么回事了</li><li><code>source</code>存放的大多是数据，比如markdown格式的post文件，或者你要用到的图片等文件。</li><li><code>themes</code>目录存放主题，我所使用的主题为matery，点开里面又是一番新天地……</li><li><code>_config.yml</code>是总的配置文件，这个非常重要！主题里面也有一个_config.yml，主要用来控制博客的外观。</li><li><code>db.json</code>这个不用管</li><li><code>LICENSE</code>这个是协议，只要你copy的代码里面有这个，你的代码公布出去就必须包含这个文件。</li><li><code>package.json</code>和<code>package-lock.json</code>是使用npm安装包时生成的文件，你可以在里面看到所安装包的版本情况。</li></ul><h4 id="2-2-主题目录-themes-matery"><a href="#2-2-主题目录-themes-matery" class="headerlink" title="2.2.主题目录/themes/matery"></a>2.2.主题目录/themes/matery</h4><p>下图为主题目录文件结构：</p><p><img src="%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BB%9A%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03.png" alt></p><ul><li><code>languages</code>应该是做映射用的，因为有些地方对变量取名有要求，有些变量名中不能有空格(比如url)，所以这里做了一些映射：<code>recommendedPosts: Recommended Posts</code>，还有些是单复数转换如：<code>posts: Posts</code>；</li><li><code>layout</code>存放的是ejs文件，主要用来生成public文件夹中的html文件，作用是渲染页面，有兴趣的可以查一下NodeJS的express和ejs；</li><li><code>source</code>存放图片等资源，这里的资源一般与页面有关。</li><li><code>_config.yml</code>非常重要！主要用来控制博客的外观。</li></ul><h2 id="博客截图"><a href="#博客截图" class="headerlink" title="博客截图"></a>博客截图</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BB%9A%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/04.png" alt>  </p><p><img src="%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BB%9A%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/05.png" alt> </p><h3 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h3><p><img src="%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BB%9A%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/06.png" alt>  </p><h3 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h3><p><img src="%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BB%9A%E4%B8%BD%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/07.png" alt> </p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dijkstra算法的简单python实现（附代码）</title>
      <link href="/2021/05/01/2019-03-21-dijkstra-algorithms/"/>
      <url>/2021/05/01/2019-03-21-dijkstra-algorithms/</url>
      
        <content type="html"><![CDATA[<h2 id="Dijkstra算法介绍："><a href="#Dijkstra算法介绍：" class="headerlink" title="Dijkstra算法介绍："></a>Dijkstra算法介绍：</h2><p><a href="http://wiki.jikexueyuan.com/project/easy-learn-algorithm/dijkstra.html" target="_blank" rel="noopener">http://wiki.jikexueyuan.com/project/easy-learn-algorithm/dijkstra.html</a></p><p>按照Dijkstra算法的思路用python实现了一下，用邻接矩阵表示点与点之间边的权重。刚接触Dijkstra算法，网上python实现的程序太过复杂因此没看，如果程序有错误欢迎指出。</p><p>以下图为例：<br><img src="https://img-blog.csdnimg.cn/20190321140749217.png" alt></p><p>他的邻接矩阵如下：<br><img src="https://img-blog.csdnimg.cn/20190321141010935.png" alt></p><p>=&gt;</p><pre class="line-numbers language-Python"><code class="language-Python">Inf = float('inf')Adjacent = [[0, 1, 12, Inf, Inf, Inf],             [Inf, 0, 9, 3, Inf, Inf],             [Inf, Inf, 0, Inf, 5, Inf],             [Inf, Inf, 4, 0, 13, 15],             [Inf, Inf, Inf, Inf, 0, 4],             [Inf, Inf, Inf, Inf, Inf, 0]]Src, Dst, N = 0, 5, 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> Src表示起点的编号，Dst表示终点的编号，N表示结点个数.</p><p> Dijkstra算法实现:</p><pre class="line-numbers language-Python"><code class="language-Python">def dijstra(adj, src, dst, n):    dist = [Inf] * n    dist[src] = 0    book = [0] * n # 记录已经确定的顶点    # 每次找到起点到该点的最短途径    u = src    for _ in range(n-1):    # 找n-1次        book[u] = 1 # 已经确定        # 更新距离并记录最小距离的结点        next_u, minVal = None, float('inf')        for v in range(n):    # w            w = adj[u][v]            if w == Inf:    # 结点u和v之间没有边                continue            if not book[v] and dist[u] + w < dist[v]: # 判断结点是否已经确定了，                dist[v] = dist[u] + w                if dist[v] < minVal:                    next_u, minVal = v, dist[v]        # 开始下一轮遍历        u = next_u    print(dist)    return dist[dst]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dist为起点-&gt;每个结点的距离的列表。（所以起点要赋值为0:dist[src] = 0），而 book的作用是记录已经确定了最短距离的结点的列表。整体程序如下：</p><pre class="line-numbers language-Python"><code class="language-Python">​Inf = float('inf')Adjacent = [[0, 1, 12, Inf, Inf, Inf],            [Inf, 0, 9, 3, Inf, Inf],            [Inf, Inf, 0, Inf, 5, Inf],            [Inf, Inf, 4, 0, 13, 15],            [Inf, Inf, Inf, Inf, 0, 4],            [Inf, Inf, Inf, Inf, Inf, 0]]Src, Dst, N = 0, 5, 6def dijstra(adj, src, dst, n):    dist = [Inf] * n    dist[src] = 0    book = [0] * n # 记录已经确定的顶点    # 每次找到起点到该点的最短途径    u = src    for _ in range(n-1):    # 找n-1次        book[u] = 1 # 已经确定        # 更新距离并记录最小距离的结点        next_u, minVal = None, float('inf')        for v in range(n):    # w            w = adj[u][v]            if w == Inf:    # 结点u和v之间没有边                continue            if not book[v] and dist[u] + w < dist[v]: # 判断结点是否已经确定了，                dist[v] = dist[u] + w                if dist[v] < minVal:                    next_u, minVal = v, dist[v]        # 开始下一轮遍历        u = next_u    print(dist)    return dist[dst]dijstra(Adjacent, Src, Dst, N)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果为：[0, 1, 8, 4, 13, 17]</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dijkstra </tag>
            
            <tag> 算法 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
